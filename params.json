{"name":"Rest API Response Library","tagline":"This library provides a extension for the symfony/http-foundation component to build standardized json responses.","body":"Rest API Response Library\r\n=========================\r\n[![Build Status](https://travis-ci.org/pmarien/rest-api-response.svg)](https://travis-ci.org/pmarien/rest-api-response)\r\n[![Coverage Status](https://coveralls.io/repos/pmarien/rest-api-response/badge.svg?branch=master&service=github)](https://coveralls.io/github/pmarien/rest-api-response?branch=master)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/358209df-2792-425b-ae62-eacc6742db3c/mini.png)](https://insight.sensiolabs.com/projects/358209df-2792-425b-ae62-eacc6742db3c)\r\n\r\nThis Library provides an API-Handling abstraction on top of the Symfony HTTP-Foundation-Component for RESTful JSON-API's.\r\n\r\nThe Library defines custom Exceptions and Exception-Interfaces for Error Handling. \r\n\r\nThere is a Response-Class for handling of successfull responses and an Error-Response-Class for Exception-Responses.\r\n\r\n## Usage\r\n### JSON Output\r\n\r\nStatus: *indicates, weather the request was successful or not*\r\n \r\nCount: *Number of results which are delivered within the results array*\r\n\r\nResults: *Array of one or more data objects (your data)*\r\n\r\n#### Success\r\n\r\n    {\r\n        \"status\": \"success\",\r\n        \"count\": 1,\r\n        \"results\": [\r\n            {\r\n                \"custom\": \"data\"\r\n            }\r\n        ]\r\n    }\r\n\r\n#### Error\r\n\r\n    {\r\n        \"status\": \"error\",\r\n        \"count\": 1,\r\n        \"results\": [\r\n            {\r\n                \"code\": 0,\r\n                \"message\": \"Error Message\",\r\n                \"previous\": null,\r\n                \"data\": [\r\n                    \"optional custom debug data, can be an object or an array\"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n\r\n### Get a Response Object\r\n```$response = new ApiResponse(['message'=>'Hello World']);```\r\n\r\n```$errorResponse = new ApiResponse(new \\Exception('Request failed!'));```\r\n\r\n### Object Handling\r\nBy default, protected and private properties of objects will be ignored be json\\_encode().\r\n\r\nTo build a response from custom objects, this library provides an Interface (JsonEncodableInterface). Objects which implement these Interface can be handled on custom way.\r\n\r\n#### Example\r\nyour Class\r\n\r\n    class CustomObject implements JsonEncodableInterface {\r\n    \r\n        /**\r\n         * @var string\r\n         */\r\n        protected $publicForResponse = 'hello';\r\n        \r\n        /**\r\n         * @var string\r\n         */\r\n        protected $notPublic = 'world';\r\n        \r\n        /**\r\n         * Return an array of properties which can be encoded as json\r\n         * @return array\r\n         */\r\n        public function encode(){\r\n            return [\r\n                'public' => $this->publicForResponse\r\n            ];\r\n        }\r\n    }\r\n\r\nyour Controller Action\r\n\r\n    public function testAction(){\r\n        return new ApiResponse(new CustomObject());\r\n    }    \r\n\r\nJson-Response\r\n\r\n    {\r\n        \"status\": \"success\",\r\n        \"count\": 1,\r\n        \"results\": [\r\n            {\r\n                \"public\": \"hello\"\r\n            }\r\n        ]\r\n    }\r\n\r\n### Exceptions\r\nThere are four special Exceptions and Interfaces defined in this Library:\r\n\r\nExceptionInterface: *Provides a Method called \"getMetaData\" which should return an array with custom debug data for the error response*\r\n\r\nUncriticalExceptionInterface: *If an Exception implements these Interface, the error response will return the error object and status but with a HTTP-Status-Code 200 (Ok)*\r\n\r\nCriticalExceptionInterface: *With these Interface you are able to define a custom HTTP-Status-Code instead of the default 500 (Internal Server Error) Status*\r\n\r\nExceptionListInterface: *With these Interface you are able to define more than one error result object for one response*\r\n\r\n##### Please note that your custom Exception must extend the basic php exception, even if you implement one ore more of the interfaces.\r\n\r\nThere are also predefined exceptions ready to use:\r\n\r\nUncriticalException: *Implements the ExceptionInterface and the UncriticalExceptionInterface*\r\n\r\nCriticalException: *Implements the ExceptionInterface and the CriticalExceptionInterface*\r\n\r\nUncriticalExceptionExceptionList: *Implements the ExceptionInterface, the UncriticalExceptionInterface and the ExceptionListInterface*\r\n\r\nCriticalExceptionExceptionList: *Implements the ExceptionInterface, the CriticalExceptionInterface and the ExceptionListInterface*\r\n\r\n## Licence\r\nThis library is under MIT Licence.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}